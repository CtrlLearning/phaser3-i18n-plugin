{"version":3,"file":"Ii18n.js","sourceRoot":"","sources":["../../../../../src/com/koreez/plugin/i18n/Ii18n.ts"],"names":[],"mappings":"","sourcesContent":["import i18next from \"i18next\";\r\n\r\nexport interface Ii18n {\r\n    /**\r\n     * List of modules used\r\n     */\r\n    modules: i18next.Modules;\r\n\r\n    /**\r\n     * Internal container for all used plugins and implementation details like languageUtils, pluralResolvers, etc.\r\n     */\r\n    services: i18next.Services;\r\n\r\n    /**\r\n     * Uses similar args as the t function and returns true if a key exists.\r\n     */\r\n    exists: i18next.ExistsFunction;\r\n\r\n    /**\r\n     * Is set to the current detected or set language.\r\n     * If you need the primary used language depending on your configuration (whilelist, load) you will prefer using i18next.languages[0].\r\n     */\r\n    language: string;\r\n\r\n    /**\r\n     * Is set to an array of language-codes that will be used it order to lookup the translation value.\r\n     */\r\n    languages: string[];\r\n\r\n    /**\r\n     * Exposes interpolation.format function added on init.\r\n     */\r\n    format: i18next.FormatFunction;\r\n\r\n    /**\r\n     * Current options\r\n     */\r\n    options: i18next.InitOptions;\r\n\r\n    /**\r\n     * Is initialized\r\n     */\r\n    isInitialized: boolean;\r\n\r\n    loadResources(callback?: (err: any) => void): void;\r\n\r\n    /**\r\n     * Returns a t function that defaults to given language or namespace.\r\n     * Both params could be arrays of languages or namespaces and will be treated as fallbacks in that case.\r\n     * On the returned function you can like in the t function override the languages or namespaces by passing them in options or by prepending namespace.\r\n     */\r\n    getFixedT(lng: string | string[], ns?: string | string[]): i18next.TFunction;\r\n    getFixedT(lng: null, ns: string | string[]): i18next.TFunction;\r\n\r\n    /**\r\n     * Changes the language. The callback will be called as soon translations were loaded or an error occurs while loading.\r\n     * HINT: For easy testing - setting lng to 'cimode' will set t function to always return the key.\r\n     */\r\n    changeLanguage(lng: string, callback?: i18next.Callback): Promise<i18next.TFunction>;\r\n\r\n    /**\r\n     * Loads additional namespaces not defined in init options.\r\n     */\r\n    loadNamespaces(ns: string | string[], callback?: i18next.Callback): Promise<void>;\r\n\r\n    /**\r\n     * Loads additional languages not defined in init options (preload).\r\n     */\r\n    loadLanguages(lngs: string | string[], callback?: i18next.Callback): Promise<void>;\r\n\r\n    /**\r\n     * Reloads resources on given state. Optionally you can pass an array of languages and namespaces as params if you don't want to reload all.\r\n     */\r\n    reloadResources(lngs?: string | string[], ns?: string | string[], callback?: () => void): Promise<void>;\r\n    reloadResources(lngs: null, ns: string | string[], callback?: () => void): Promise<void>;\r\n\r\n    /**\r\n     * Changes the default namespace.\r\n     */\r\n    setDefaultNamespace(ns: string): void;\r\n\r\n    /**\r\n     * Returns rtl or ltr depending on languages read direction.\r\n     */\r\n    dir(lng?: string): \"ltr\" | \"rtl\";\r\n\r\n    /**\r\n     * Will return a new i18next instance.\r\n     * Please read the options page for details on configuration options.\r\n     * Providing a callback will automatically call init.\r\n     * The callback will be called after all translations were loaded or with an error when failed (in case of using a backend).\r\n     */\r\n    createInstance(options?: i18next.InitOptions, callback?: i18next.Callback): i18next.i18n;\r\n\r\n    /**\r\n     * Creates a clone of the current instance. Shares store, plugins and initial configuration.\r\n     * Can be used to create an instance sharing storage but being independent on set language or namespaces.\r\n     */\r\n    cloneInstance(options?: i18next.InitOptions, callback?: i18next.Callback): i18next.i18n;\r\n\r\n    /**\r\n     * Gets fired after initialization.\r\n     */\r\n    on(event: \"initialized\", callback: (options: i18next.InitOptions) => void): void;\r\n\r\n    /**\r\n     * Gets fired on loaded resources.\r\n     */\r\n    on(event: \"loaded\", callback: (loaded: boolean) => void): void;\r\n\r\n    /**\r\n     * Gets fired if loading resources failed.\r\n     */\r\n    on(event: \"failedLoading\", callback: (lng: string, ns: string, msg: string) => void): void;\r\n\r\n    /**\r\n     * Gets fired on accessing a key not existing.\r\n     */\r\n    on(event: \"missingKey\", callback: (lngs: string[], namespace: string, key: string, res: string) => void): void;\r\n\r\n    /**\r\n     * Gets fired when resources got added or removed.\r\n     */\r\n    on(event: \"added\" | \"removed\", callback: (lng: string, ns: string) => void): void;\r\n\r\n    /**\r\n     * Gets fired when changeLanguage got called.\r\n     */\r\n    on(event: \"languageChanged\", callback: (lng: string) => void): void;\r\n\r\n    /**\r\n     * Event listener\r\n     */\r\n    on(event: string, listener: (...args: any[]) => void): void;\r\n\r\n    /**\r\n     * Remove event listener\r\n     */\r\n    off(event: string, listener: (...args: any[]) => void): void;\r\n\r\n    /**\r\n     * Gets one value by given key.\r\n     */\r\n    getResource(lng: string, ns: string, key: string, options?: { keySeparator?: string }): any;\r\n\r\n    /**\r\n     * Adds one key/value.\r\n     */\r\n    addResource(lng: string, ns: string, key: string, value: string, options?: { keySeparator?: string; silent?: boolean }): void;\r\n\r\n    /**\r\n     * Adds multiple key/values.\r\n     */\r\n    addResources(lng: string, ns: string, resources: any): void;\r\n\r\n    /**\r\n     * Adds a complete bundle.\r\n     * Setting deep param to true will extend existing translations in that file.\r\n     * Setting overwrite to true it will overwrite existing translations in that file.\r\n     */\r\n    addResourceBundle(lng: string, ns: string, resources: any, deep?: boolean, overwrite?: boolean): void;\r\n\r\n    /**\r\n     * Checks if a resource bundle exists.\r\n     */\r\n    hasResourceBundle(lng: string, ns: string): boolean;\r\n\r\n    /**\r\n     * Returns a resource bundle.\r\n     */\r\n    getResourceBundle(lng: string, ns: string): any;\r\n\r\n    /**\r\n     * Removes an existing bundle.\r\n     */\r\n    removeResourceBundle(lng: string, ns: string): void;\r\n}\r\n"]}